library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = counts(set1), colData = pData(set1),design = ~ W_1 + x)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = counts(set1), colData = pData(set1),design = ~ W_1 + x)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RUVSeq")
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = counts(set1), colData = pData(set1),design = ~ W_1 + x)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RUVSeq")
tail(zfGenes)
filter <- apply(zfGenes, 1, function(x) length(x[x>5])>=2)
head(filter)
filtered <- zfGenes[filter,]
genes <- rownames(filtered)[grep("^ENS", rownames(filtered))]
spikes <- rownames(filtered)[grep("^ERCC", rownames(filtered))]
head(genes)
x <- as.factor(rep(c("Ctl", "Trt"), each=3))
set <- newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set
library(RColorBrewer)
colors <- brewer.pal(3, "Set2")
plotRLE(set, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotPCA(set, col=colors[x], cex=1.2)
set <- betweenLaneNormalization(set, which="upper")
plotRLE(set, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotPCA(set, col=colors[x], cex=1.2)
set1 <- RUVg(set, spikes, k=1)
pData(set1)
plotRLE(set1, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotPCA(set1, col=colors[x], cex=1.2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
names(final)[1] <- "Gene"
with(final, plot(log2FoldChange, -log10(pvalue), pch = 20, main = "Tanmay"))
with(subset(final, pvalue < .05 & abs(log2FoldChange) > 1), points(log2FoldChange, -log10(pvalue), pch = 20, col = "blue"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RUVSeq")
install.packages("BiocManager")
BiocManager::install("zebrafishRNASeq")
install.packages("BiocManager")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RUVSeq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("zebrafishRNASeq")
library(RUVSeq)
library(zebrafishRNASeq)
data(zfGenes)
head(zfGenes)
tail(zfGenes)
filter <- apply(zfGenes, 1, function(x) length(x[x>5])>=2)
filtered <- zfGenes[filter,]
genes <- rownames(filtered)[grep("^ENS", rownames(filtered))]
spikes <- rownames(filtered)[grep("^ERCC", rownames(filtered))]
x <- as.factor(rep(c("Ctl", "Trt"), each=3))
set <- newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set
library(RColorBrewer)
colors <- brewer.pal(3, "Set2")
plotRLE(set, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotPCA(set, col=colors[x], cex=1.2)
# Upper quantile normalization to reduce batch effects:
set <- betweenLaneNormalization(set, which="upper")
plotRLE(set, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotPCA(set, col=colors[x], cex=1.2)
# Spike ins to detect unwanted variations:
set1 <- RUVg(set, spikes, k=1)
pData(set1)
plotRLE(set1, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotPCA(set1, col=colors[x], cex=1.2)
# Differential Gene Expression Analysis ####
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = counts(set1),
colData = pData(set1),
design = ~ W_1 + x)
dds <- DESeq(dds)
res <- results(dds)
res
# convert to dataframe
output <- as.data.frame(res)
# volcano plots:
final <- data.frame(row.names(output))
final[,c(2,3)] <- output[,c(2,5)]
names(final)[1] <- "Gene"
# Make a basic volcano plot
with(final, plot(log2FoldChange, -log10(pvalue), pch = 20, main = "Tanmay2020544_DEGs"))
with(subset(final, pvalue < .05 & abs(log2FoldChange) > 1), points(log2FoldChange, -log10(pvalue), pch = 20, col = "blue"))
df <- data.frame(res)
df
#write.csv(df,"DATA.csv")         # creating a csv file for the whole data
library(dplyr)
sample1 = filter(df,pvalue<0.05)  # sample1 contain all genes with p<0.05
v2 = filter(sample1,log2FoldChange > 0) #sample for upregulated2
v2 <- v2 %>% arrange(desc(log2FoldChange))  #sorting the upregulated
v2 <- head(v2, 50)                             # top 50
write.csv(v2,"UP_REGULATED.csv")            # top upregulated
v3 <- filter(sample1,log2FoldChange < 0)   # filtering for down regulated
v3 <-  v3 %>% arrange(log2FoldChange)  # sorting the down regulated
v3 <- head(v3, 50)                        # top 50 down regulated
write.csv(v3,"DOWN_REGULATED.csv")       # csv file for top 50 down regulated
View(v2)
View(v3)
View(v3)
View(v2)
View(v2)
View(v3)
q()
